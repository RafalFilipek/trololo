// Generated by CoffeeScript 1.4.0
var EntryPointCtrl, HomeCtrl, LoginCtrl;

EntryPointCtrl = function($scope, $location, $rootScope, gitlab) {
  return gitlab.get('check');
};

LoginCtrl = function($scope, $location, $cookies, $rootScope, gitlab) {
  $scope.invalidToken = false;
  $scope.isChecking = false;
  return $scope.login = function() {
    $scope.isChecking = true;
    return gitlab.get('check', {
      'private_token': $scope.private_token
    }).success(function(response) {
      $scope.isChecking = false;
      if (response.authorized) {
        $cookies.private_token = $scope.private_token;
        return $scope.invalidToken = false;
      } else {
        return $scope.invalidToken = true;
      }
    });
  };
};

HomeCtrl = function($scope, $rootScope, gitlab) {
  var setState,
    _this = this;
  $scope.user = false;
  $scope.current = {
    'project': void 0,
    'milestone': void 0
  };
  $scope.projects = void 0;
  $scope.milestones = void 0;
  $scope.issues = void 0;
  this.currentDragged = void 0;
  $scope.setDraggable = function(repr) {
    return _this.currentDragged = repr;
  };
  $scope.moveDragged = function(type, index) {
    var item;
    item = $scope.issues[_this.currentDragged.type][_this.currentDragged.index];
    $scope.issues[_this.currentDragged.type].splice(_this.currentDragged.index, 1);
    return $scope.issues[type].splice(index, 0, item);
  };
  gitlab.get('user').success(function(response) {
    return $scope.user = response.data;
  });
  gitlab.get('projects').success(function(response) {
    return $scope.projects = response.data;
  });
  setState = function(issue) {
    var labels, state, states, _i, _len;
    states = ['todo', 'wip', 'done', 'trash'];
    labels = issue.labels;
    for (_i = 0, _len = states.length; _i < _len; _i++) {
      state = states[_i];
      if (_.contains(labels, state)) {
        return state;
      }
    }
    return 'todo';
  };
  $scope.filterByMilestone = function(issue) {
    var currentMilestone;
    currentMilestone = parseInt($scope.current.milestone, 10);
    if (_.isNumber(currentMilestone) && !_.isNaN(currentMilestone)) {
      return (issue.milestone || {}).id === currentMilestone;
    } else {
      return true;
    }
  };
  return $scope.$watch('current.project', function() {
    if ($scope.current.project) {
      $scope.current.milestones = void 0;
      return gitlab.get('projects/' + $scope.current.project + '/milestones').success(function(response) {
        $scope.milestones = response.data;
        return gitlab.get('projects/' + $scope.current.project + '/issues').success(function(response) {
          return $scope.issues = _.groupBy(response.data, setState);
        });
      });
    }
  });
};
