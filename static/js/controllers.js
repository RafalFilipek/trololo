// Generated by CoffeeScript 1.4.0
var EntryPointCtrl, HomeCtrl, LoginCtrl;

EntryPointCtrl = function($scope, $location, $rootScope, gitlab) {
  return gitlab.get({
    action: 'check'
  }, function(response) {
    return $rootScope.isLogged = response.authorized;
  });
};

LoginCtrl = function($scope, $location, $cookies, $rootScope, gitlab) {
  $scope.invalidToken = false;
  $scope.isChecking = false;
  return $scope.login = function() {
    $scope.isChecking = true;
    return gitlab.get({
      action: 'check',
      private_token: $scope.private_token
    }, function(response) {
      $scope.isChecking = false;
      if (response.authorized) {
        $cookies.private_token = $scope.private_token;
        $scope.invalidToken = false;
        return $rootScope.isLogged = true;
      } else {
        return $scope.invalidToken = true;
      }
    });
  };
};

HomeCtrl = function($scope, $rootScope, gitlab) {
  var currentDragged, setState;
  $scope.user = false;
  $scope.issues = {};
  currentDragged = void 0;
  $scope.setDraggable = function(repr) {
    return currentDragged = repr;
  };
  $scope.moveDragged = function(type, index) {
    var item;
    item = $scope.issues[currentDragged.type][currentDragged.index];
    $scope.issues[currentDragged.type].splice(currentDragged.index, 1);
    return $scope.issues[type].splice(index, 0, item);
  };
  gitlab.get({
    action: 'user'
  }, function(response) {
    $rootScope.isLogged = response.authorized;
    return $scope.user = response.data;
  });
  gitlab.get({
    action: 'projects'
  }, function(response) {
    $rootScope.isLogged = response.authorized;
    $scope.projects = response.data;
    return $scope.currentProject = $scope.projects[0].id;
  });
  /*
  	Yep, test crap section.
  */

  setState = function(issue) {
    return issue.type = _.contains(issue.labels, 'Performance') ? 'todo' : issue.labels.length === 0 ? 'todo' : _.contains(issue.labels, 'feature') ? 'wip' : 'done';
  };
  return $scope.$watch('currentProject', function() {
    if ($scope.currentProject) {
      return gitlab.get({
        action: 'projects/' + $scope.currentProject + '/issues'
      }, function(response) {
        return $scope.issues = _.groupBy(response.data, setState);
      });
    }
  });
};
